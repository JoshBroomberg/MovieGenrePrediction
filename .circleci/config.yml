version: 2.1

orbs:
  python: circleci/python@1.2.1

jobs:
  # create-env:
  #   docker:
  #     - image: circleci/python:3.8.5
  #   steps:
  #     - checkout
  #     # - run: sudo chown -R circleci:circleci /usr/local/bin
  #     # - run: sudo chown -R circleci:circleci /usr/local/lib/python3.8/site-packages
  #     - restore_cache:
  #         key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
  #     - run:
  #         command: |
  #           sudo pip install virtualenv
  #           virtualenv venv
  #           source venv/bin/activate
  #           pip install -r requirements.txt
  #     - save_cache:
  #         key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
  #         paths:
  #           - "venv"
  #           # - "/usr/local/bin"
  #           # - "/usr/local/lib/python3.8/site-packages"
  #     - run:
  #         command: python3 src/data/fetch_raw_movie_data.py
  #         name: Fetch Raw Data
    
  #     - persist_to_workspace:
  #         root: ~/project
  #         paths:
  #             - data/*
  #             - models/*

  fetch-raw-data:
    executor: python/default
    steps:
      - checkout
      - python/install-packages
      - run:
          command: python3 src/data/fetch_raw_movie_data.py
          name: Fetch Raw Data
    
      - persist_to_workspace:
          root: ~/project
          paths:
              - data/*
              - models/*

  clean-movie-data:
    executor: python/default
    steps:
      - checkout
      - python/install-packages
      - attach_workspace:
          at: ~/project
      - run:
          command: python3 src/data/make_clean_movie_data.py
          name: Clean Movie Data

  clean-genre-metadata:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: python3 src/data/make_genre_metadata.py
          name: Clean Genre Data

  gen-vectorized-outcome:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: python3 src/features/generate_vectorized_outcomes.py
          name: Generate Vectorized Outcome

  gen-count-features:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: python3 src/features/generate_count_features.py
          name: Generate Count Features

  get-w2v-model:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: bash src/utils/get_word2vec.sh
          name: Get Word2Vec Model

  gen-w2v-features:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: python3 src/features/generate_word2vec_features.py
          name: Generate Word2Vec Features

  test-train-split:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: python3 src/utils/test_train_split.py
          name: Test Train Split

  train-svc:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: python3 src/models/svc.py
          name: Train SVC

  train-naive-bayes:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: python3 src/models/naive_bayes.py
          name: Train Naive Bayes

  train-neural-net:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: python3 src/models/neural_net.py
          name: Train Neural Net

  score-models:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: python3 src/scoring/score_models.py
          name: Score Models
  
  gen-comparison-report:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: bash src/report/comparison-report.sh
          name: Gen Comparison Report

  test-best-model:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: python3 src/tests/test.py
          name: Test Best Model

  gen-validation-report:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: bash src/report/validate-best-report.sh
          name: Validate Best Model

  fetch-ecr-token:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: ecr
      - run:
          command: mkdir -p /tmp/build_data && aws ecr get-login-password --region us-west-2 --profile ecr >> /tmp/build_data/ecr_token.txt
          name: Generate ECR token
      - persist_to_workspace:
          root: /tmp
          paths:
              - build_data/ecr_token.txt

  export-model-ECR:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      
      - run:
          command: python3 pipeline/export_to_ecr.py
          name: Build and Export Model to ECR


workflows:
  main:
    jobs:
      - fetch-raw-data
      - clean-movie-data:
          requires:
            - fetch-raw-data